// import React, { useMemo } from "react";             



// import MOCK_DATA from'./MOCK_DATA.json'
// import { useTable } from "react-table";
// import { COLUMNS } from "./coloumns";
// import './table.css'
// function BasicTable(){

//                                                    //----- here we memoized the data
//     const columns = useMemo(()=>COLUMNS,[])
//     const data = useMemo(()=>MOCK_DATA,[])                                        //-----Above, we pass columns and data to useTable. The useTable Hook will return the necessary props for the table, body, and the transformed data to create the header and cells. The header will be generated by iterating through headerGroups, and the table body’s rows will be generated by looping through rows:
// const tableInstance = useTable({                                                             
     
//                                  //----- here we send objwctsssssssssss a properties
//     columns,
//     data
// })          


                 
// const { getTableProps,
//     getTableBodyProps,
//     headerGroups,               //-----headerGroups, if your table has groupings
//     rows,                  //-----rows for the table based on the data passed
//     prepareRow}               //----- Prepare the row (this function needs to be called for each row before getting the row props)
//     = tableInstance
//     return(
//         <>
//         <table {...getTableProps()}>
//             <thead>
//                 {
//                     headerGroups.map((headerGroup)=>(              //-----header gruops are groupo of headers but here we never grouped any of the columns        every column has its own header column
//                 <tr {...headerGroup.getHeaderGroupProps()}>
//                     {                                                       //----- every coulmn header belonsg to its own header gruoop
//                         headerGroup.headers.map((column)=>(          //----- every header group has its own gruop and each gruop access each column
//                             <th {...column.getHeaderProps()}>              
//                                                                                 {/* //----- each column renders each header     here header is objwect which we assigned in mock data */}
//                             {column.render('Header')}

//                             </th>         


//                                                //-----first to parse datat map should be done  and then declare header for each row
                                                 
//                                                //----- for decalring dataor decalring header first call peops and then evaluate
//                         ))
//                     }
                        
//                 </tr>
//                     ))
//                 }
               
//             </thead>
//             <tbody {...getTableBodyProps()}>
                
//                    {rows.map((row)=>{
//                         prepareRow(row)          //-----This line is necessary to prepare the rows and get the row props from react-table dynamically
//                         return(                               
//                              //----- // Each row can be rendered directly as a string using the react-table render method
//                             <tr {...row.getRowProps()}>
//                                 {                                  //----- here we take data into cell using map parsing fdata into each cel so we use {}
//                                     row.cells.map((cell) =>{
//                                              return  <td {...cell.getCellProps()}>
//                                                     {cell.render('Cell')}
//                                              </td>
//                                     })
//                                 }
                           
//                         </tr>
//                         )
//                     })
//                 }
                   
//             </tbody>
//         </table>
//         </>
//     )
// }

// export default BasicTable


           //----- Table with footers


import React, { useMemo } from "react";             



import MOCK_DATA from'./MOCK_DATA.json'
import { useTable } from "react-table";
import { COLUMNS } from "./coloumns";
import './table.css'
function BasicTable(){

                                                   //----- here we memoized the data
    const columns = useMemo(()=>COLUMNS,[])
    const data = useMemo(()=>MOCK_DATA,[])                                        //-----Above, we pass columns and data to useTable. The useTable Hook will return the necessary props for the table, body, and the transformed data to create the header and cells. The header will be generated by iterating through headerGroups, and the table body’s rows will be generated by looping through rows:
const tableInstance = useTable({                                                             
     
                                 //----- here we send objwctsssssssssss a properties
    columns,
    data
})          


                 
const { getTableProps,
    footerGroups,
    getTableBodyProps,
    headerGroups,               //-----headerGroups, if your table has groupings
    rows,                  //-----rows for the table based on the data passed
    prepareRow}               //----- Prepare the row (this function needs to be called for each row before getting the row props)
    = tableInstance
    return(
        <>
        <table {...getTableProps()}>
            <thead>
                {
                    headerGroups.map((headerGroup)=>(              //-----header gruops are groupo of headers but here we never grouped any of the columns        every column has its own header column
                <tr {...headerGroup.getHeaderGroupProps()}>
                    {                                                       //----- every coulmn header belonsg to its own header gruoop
                        headerGroup.headers.map((column)=>(          //----- every header group has its own gruop and each gruop access each column
                            <th {...column.getHeaderProps()}>              
                                                                                {/* //----- each column renders each header     here header is objwect which we assigned in mock data */}
                            {column.render('Header')}

                            </th>         


                                               //-----first to parse datat map should be done  and then declare header for each row
                                                 
                                               //----- for decalring dataor decalring header first call peops and then evaluate
                        ))
                    }
                        
                </tr>
                    ))
                }
               
            </thead>
            <tbody {...getTableBodyProps()}>
                
                   {rows.map((row)=>{
                        prepareRow(row)          //-----This line is necessary to prepare the rows and get the row props from react-table dynamically
                        return(                               
                             //----- // Each row can be rendered directly as a string using the react-table render method
                            <tr {...row.getRowProps()}>
                                {                                  //----- here we take data into cell using map parsing fdata into each cel so we use {}
                                    row.cells.map((cell) =>{
                                             return  <td {...cell.getCellProps()}>
                                                    {cell.render('Cell')}
                                             </td>
                                    })
                                }
                           
                        </tr>
                        )
                    })
                }
                   
            </tbody>
            <tfoot>
                {
                    footerGroups.map((footerGroup)=>(
                         <tr {...footerGroup.getFooterGroupProps( )}>
                                   
                                   {
                                    footerGroup.headers.map((column)=>(
                                        <td {...column.getFooterProps}>
                                              {column.render('Footer')}
                                        </td>
                                    ))
                                   }
                         </tr>
                    ))
                }
            </tfoot>
        </table>
        </>
    )
}

export default BasicTable